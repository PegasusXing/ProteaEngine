cmake_minimum_required(VERSION 3.31)
project(ProteaEngine LANGUAGES CXX)

# Determine the C++ standard based on compiler
### FIXME: GNU Compiler wont compile unless CXX_STANDARD is 17 or lower -  Conflict with EventFormatter.h
function(set_default_cxx_standard)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(DEFAULT_CXX_STANDARD 17 PARENT_SCOPE)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        set(DEFAULT_CXX_STANDARD 23 PARENT_SCOPE)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(DEFAULT_CXX_STANDARD 20 PARENT_SCOPE)
    else()
        set(DEFAULT_CXX_STANDARD 23 PARENT_SCOPE)
    endif()
endfunction()

set_default_cxx_standard()

# Apply C++ standard globally
set(CMAKE_CXX_STANDARD ${DEFAULT_CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Check if the generator platform is set and valid
if (CMAKE_GENERATOR_PLATFORM)
    if (NOT CMAKE_GENERATOR_PLATFORM STREQUAL "x64")
        message(FATAL_ERROR "Unsupported platform: ${CMAKE_GENERATOR_PLATFORM}. Only x64 is supported.")
    endif()
endif()

# Check pointer size at compile time (applies to non-MSVC too)
if (CMAKE_SIZEOF_VOID_P LESS 8)
    message(FATAL_ERROR "Only 64-bit builds are supported. Please ensure you're targeting x64.")
endif()

# Hardcode architecture internally
set(PROTEA_ARCH "x64")

# Output directory configuration per config (Debug/Release/etc.)
foreach(CONFIG_TYPE DEBUG RELEASE RELWITHDEBINFO MINSIZEREL)
    string(TOUPPER ${CONFIG_TYPE} CONFIG_UPPER)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG_UPPER} ${CMAKE_BINARY_DIR}/${CONFIG_TYPE}_${PROTEA_ARCH}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIG_UPPER} ${CMAKE_BINARY_DIR}/${CONFIG_TYPE}_${PROTEA_ARCH}/lib)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_UPPER} ${CMAKE_BINARY_DIR}/${CONFIG_TYPE}_${PROTEA_ARCH}/lib)
endforeach()

# Add project subdirectories
add_subdirectory(ProteaCore)
add_subdirectory(ProteaSandbox)

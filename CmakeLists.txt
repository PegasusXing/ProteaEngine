cmake_minimum_required(VERSION 3.31)
project(ProteaEngine LANGUAGES CXX)

# Set configuration types (only applies to multi-config generators like MSVC/Xcode)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release;Dist" CACHE STRING "" FORCE)

# Set default build type for single-config generators (e.g. Ninja, Unix Makefiles)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
endif()

# Determine C++ standard based on compiler
function(set_default_cxx_standard)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(DEFAULT_CXX_STANDARD 17 PARENT_SCOPE)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        set(DEFAULT_CXX_STANDARD 23 PARENT_SCOPE)
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(DEFAULT_CXX_STANDARD 20 PARENT_SCOPE)
    else()
        set(DEFAULT_CXX_STANDARD 23 PARENT_SCOPE)
    endif()
endfunction()

set_default_cxx_standard()

set(CMAKE_CXX_STANDARD ${DEFAULT_CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Check for 64-bit architecture
if (CMAKE_GENERATOR_PLATFORM)
    if (NOT CMAKE_GENERATOR_PLATFORM STREQUAL "x64")
        message(FATAL_ERROR "Unsupported platform: ${CMAKE_GENERATOR_PLATFORM}. Only x64 is supported.")
    endif()
endif()

if (CMAKE_SIZEOF_VOID_P LESS 8)
    message(FATAL_ERROR "Only 64-bit builds are supported. Please ensure you're targeting x64.")
endif()

# Architecture definition
set(PROTEA_ARCH "x64")

# Output directories per configuration
foreach(CONFIG_TYPE Debug Release Dist)
    string(TOUPPER ${CONFIG_TYPE} CONFIG_UPPER)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG_UPPER} ${CMAKE_BINARY_DIR}/${CONFIG_TYPE}_${PROTEA_ARCH}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIG_UPPER} ${CMAKE_BINARY_DIR}/${CONFIG_TYPE}_${PROTEA_ARCH}/lib)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_UPPER} ${CMAKE_BINARY_DIR}/${CONFIG_TYPE}_${PROTEA_ARCH}/lib)
endforeach()

# Function to define PROTEA_DEBUG_BUILD / PROTEA_RELEASE_BUILD / PROTEA_DIST_BUILD macros
function(set_build_config_definitions target)
    target_compile_definitions(${target} PRIVATE
            $<$<CONFIG:Debug>:PROTEA_DEBUG_BUILD>
            $<$<CONFIG:Release>:PROTEA_RELEASE_BUILD>
            $<$<CONFIG:Dist>:PROTEA_DIST_BUILD>
    )
endfunction()

# Custom flags per compiler and config + attach PROTEA_*_BUILD macros
function(configure_compiler_flags target)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        target_compile_options(${target} PRIVATE
                $<$<CONFIG:Debug>:-g -O0>
                $<$<CONFIG:Release>:-O2>
                $<$<CONFIG:Dist>:-O3>
        )
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        target_compile_options(${target} PRIVATE
                $<$<CONFIG:Debug>:/Zi /Od>
                $<$<CONFIG:Release>:/O2>
                $<$<CONFIG:Dist>:/O2>
        )
    endif()

    # Attach PROTEA_*_BUILD macros
    set_build_config_definitions(${target})
endfunction()

# message(STATUS "Build configuration macro: $<$<CONFIG:Debug>:PROTEA_DEBUG_BUILD>$<$<CONFIG:Release>:PROTEA_RELEASE_BUILD>$<$<CONFIG:Dist>:PROTEA_DIST_BUILD>")
message(STATUS "Build type is ${CMAKE_BUILD_TYPE}")

# Add subprojects
add_subdirectory(ProteaCore)
add_subdirectory(ProteaSandbox)
